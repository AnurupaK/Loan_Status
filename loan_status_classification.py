# -*- coding: utf-8 -*-
"""Loan_Status_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ubAQKR9kRF6EdfpOdzITQvbWYjPTf8d1

Importing Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data loading into pandas dataframe"""

loan = pd.read_csv('Loan_data.csv')

df = loan.copy()

"""Looking into the data"""

df.info()
df.describe()
df.shape

"""Chceking for null values"""

df.isnull().sum()

df = df.dropna()

cat_list = list(df.columns)
object_dtype = []
for cat in cat_list:
  if df[cat].values.dtype=='object':
    print(cat)
    print(df[cat].unique())
    object_dtype.append(cat)
object_dtype = object_dtype[1:]
print(object_dtype)

"""Visualization of data to see relation between categorical features and target variable"""

object_dtype2 = object_dtype[:-1]
print(object_dtype2)

fig, axes = plt.subplots(2, 3, figsize=(15, 10))
axes = axes.flatten()
print(axes)
for i, cat in enumerate(object_dtype2):
    sns.countplot(x=cat, hue='Loan_Status', data=loan, ax=axes[i])

plt.tight_layout()
plt.show()

"""In the dependents column we have 3+ stuff and it is not an integer hence we can either replace it with some number or do a label encoding"""

##Replacing Tecnique

# df2 = df.copy()
# df2.replace(to_replace='3+',value=4,inplace=True)
# print(df2)

"""Label encoding way"""

label_encode = LabelEncoder()

for feature in object_dtype:
  df[feature] = label_encode.fit_transform(df[feature])

df = df.drop(columns='Loan_ID',axis=1)

"""Data Seperation into features and Target
Note: We don't need to standardize the dataset as all the units are in same currency unit
"""

X = df.drop(columns='Loan_Status',axis=1)
Y = df['Loan_Status']

"""Splitting data into train and test"""

Xlearn, Xexam, Ylearn, Yexam = train_test_split(X,Y, test_size=0.1,stratify=Y, random_state=2)
print(X.shape,Xlearn.shape,Xexam.shape)

"""Model Making"""

classifier = svm.SVC(kernel='linear')

"""Training the model"""

classifier.fit(Xlearn,Ylearn)

"""Model evaluation on training and testing data"""

##Training
Ylearn_predict = classifier.predict(Xlearn)
Accuracy_score_learn = accuracy_score(Ylearn_predict,Ylearn)

##Testing
Yexam_predict = classifier.predict(Xexam)
Accuracy_score_exam = accuracy_score(Yexam_predict,Yexam)


print(f'The accuracy score for training:{Accuracy_score_learn}')
print(f'The accuracy score for tesing:{Accuracy_score_exam}')

"""Making predictive system"""

input = X.iloc[:1,:]

prediction = classifier.predict(input)
if prediction ==1:
  print('The loan is approved')
else:
  print('The loan is disapproved')